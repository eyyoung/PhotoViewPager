apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion "22.0.1"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile project(":library")
    compile project(":library-iml")
    compile "com.android.support:recyclerview-v7:23.1.0"
    compile('com.afollestad:material-dialogs:0.7.8.1@aar') {
        transitive true
        exclude group: 'com.android.support'
    }
    compile('com.nd.android.smartcan:smartcan-appfactory:0.9.9.3.smartcan@aar') {
        transitive = true
        changing = true
        exclude group: 'android.support', module: 'android-support-v4'
    }
}

apply plugin: 'maven'
task uploadLongClickPlugin(type: Upload) {
    configuration = configurations.archives
    uploadDescriptor = true
    repositories {
        mavenDeployer {
            repository(url: "http://nexus.sdp.nd/nexus/content/repositories/android-3rd/") {
                authentication(userName: NEXUS_USERNAME, password: NEXUS_PASSWORD)
            }
            pom.version = rootProject.ext.module_version
            pom.artifactId = "photoview-longclick"
            pom.groupId = "com.nd.android.sdp.common"
            def list = [
                    new LocalDependencies('photoview', 'com.nd.android.sdp.common', 'photoview-iml', rootProject.ext.module_version),
                    new LocalDependencies('photoview-iml', 'com.nd.android.sdp.common', 'photoview', rootProject.ext.module_version),
            ]
            pom.whenConfigured { pom ->
                list.each {
                    item ->
                        def dep = pom.dependencies.find { dep -> dep.artifactId == item.localProjectName }
                        pom.dependencies.remove(dep)
                }
            }
            pom.withXml {
                def dependenciesNode = asNode().get('dependencies')
                list.each {
                    item ->
                        def dependencyNode = dependenciesNode.first().appendNode('dependency')
                        dependencyNode.appendNode('groupId', item.remoteGroupId)
                        dependencyNode.appendNode('artifactId', item.remoteArtifactId)
                        dependencyNode.appendNode('version', item.remoteVersion)
                }
            }
        }
    }
    doLast {
        println(rootProject.ext.module_version)
    }
}

class LocalDependencies {
    def localProjectName;
    def remoteGroupId;
    def remoteArtifactId;
    def remoteVersion;

    LocalDependencies(Object pLocalProjectName,
                      Object pRemoteGroupId,
                      Object pRemoteArtifactId,
                      Object pRemoteVersion) {
        localProjectName = pLocalProjectName
        remoteGroupId = pRemoteGroupId
        remoteArtifactId = pRemoteArtifactId
        remoteVersion = pRemoteVersion
    }
}